context VehicleContext {

    //Entity
    structure Vehicle<entity, aggregate> {
        long id<identifier>, //GeneratedValue
        IdentificationNumber identificationNumber<part>,
        long providerId<neverEmpty>,
        string vehicleModel<neverEmpty>,
        VehicleType vehicleType<neverEmpty>,
        VehicleStatus status<neverEmpty>, //Default-value is VehicleStatus.AVAILABLE
        VehicleRestrictions restrictions<part>,
        Price vehiclePrice<part>,
        Location currentLocation<part>
    }

    structure IdentificationNumber<valueObject> {
        //Column(name = "identification_number", unique = true, nullable = false)
        immutable string identNumber<neverEmpty>
    }

    structure VehicleRestrictions<valueObject> {
        immutable int minAge<neverEmpty>,
        immutable int maxBookingTimeMinutes<neverEmpty>,
        immutable double maxDistanceKm<neverEmpty>,
        immutable int maxPassengers<neverEmpty>,
        immutable DriverLicenseType requiredLicense<neverEmpty>
    }

    structure Location<valueObject> {
        immutable double latitude,
        immutable double longitude
    }

    structure Price<valueObject> {
        immutable double amount<neverEmpty>,
        immutable BillingModel billingModel<neverEmpty>
    }

    enum BillingModel {
        PER_HOUR,
        PER_KILOMETER
    }

    enum DriverLicenseType {
        MOTORCYCLE("A"),
        CAR("B"),
        TRUCK("C"),
        BUS("D"),
        NONE("NONE")
    }

    enum VehicleStatus {
        AVAILABLE,
        BOOKED,
        IN_USE,
        MAINTENANCE,
        RETIRED
    }

    enum VehicleType {
        BICYCLE,
        E_BIKE,
        E_SCOOTER,
        SCOOTER,
        MOTORCYCLE,
        CAR,
        BUS,
        TRUCK
    }

    collection VehicleList {Vehicle vehicle}

    structure VehicleRepository<repository> {
        function VehicleList findByStatus(VehicleStatus status),
        function VehicleList findAllByProviderId(long providerId),
        function Vehicle findByIdentificationNumberIdentNumber(string identificationNumber), //Optional<Vehicle>
        procedure deleteAllByProviderId(long providerId)
    }

    //DTO
    structure EditVehicleRequest<valueObject> {
        immutable string identificationNumber,
        immutable string vehicleModel,
        immutable string vehicleType,
        immutable string status,
        immutable string address,
        immutable double priceAmount,
        immutable string billingModel,
        immutable int minAge,
        immutable int maxBookingTimeMinutes,
        immutable double maxDistanceKm,
        immutable int maxPassengers,
        immutable string requiredLicenseType
    }

    //DTO
    structure GeoResult<valueObject> {
        immutable string lat,
        immutable string lon
    }

    //DTO
    structure NearestAvailableVehicleResponse<valueObject> {
        immutable long vehicleId,
        immutable string vehicleModel,
        immutable string providerName,
        immutable string vehicleType,
        immutable string status,
        immutable double priceAmount,
        immutable string billingModel,
        immutable string address,
        immutable double latitude,
        immutable double longitude,
        immutable double distanceInKm,
        immutable double averageVehicleRating,
        immutable double averageProviderRating,
        immutable VehicleRestrictions restrictions
    }

    //DTO
    structure ProviderVehicleResponse<valueObject> {
        immutable long vehicleId,
        immutable string identNumber,
        immutable string vehicleModel,
        immutable string vehicleType,
        immutable string status,
        immutable double priceAmount,
        immutable string billingModel,
        immutable string address,
        immutable double latitude,
        immutable double longitude,
        immutable double averageVehicleRating,
        immutable VehicleRestrictions restrictions
    }

    //DTO
    structure ReverseGeoResponse<valueObject> {
        immutable string display_name
    }

    //DTO
    structure BillingInfo<valueObject> {
        immutable string billingModel,
        immutable double rate
    }

    //DTO
    structure VehicleRequest<valueObject> {
        immutable string identificationNumber,
        immutable string vehicleType,
        immutable string vehicleModel,
        immutable double priceAmount,
        immutable string billingModel,
        immutable string address,
        immutable int minAge,
        immutable int maxBookingTimeMinutes,
        immutable double maxDistanceKm,
        immutable int maxPassengers,
        immutable string requiredLicenseType
    }

    //DTO
    structure VehicleWithDistance<valueObject> {
        immutable Vehicle vehicle,
        immutable double distanceInKm
    }

    structure VehicleService<applicationService> {
        procedure registerNewVehicle(VehicleRequest request, long providerId),
        function Vehicle fetchVehicleById(long id), //Optional<Vehicle>
        procedure deleteVehicle(long id), //Transactional
        procedure deleteAllVehiclesByProviderId(long providerId), //Transactional
        function NearestAvailableVehicleResponseList findAvailableNearbyVehicles(Location neededLocationWithAvailableVehicles, double radiusInKm), //Transactional
        function ProviderVehicleResponseList listProviderVehiclesWithRatings(long providerId),
        procedure updateVehicleStatus(long vehicleId, VehicleStatus newStatus),
        procedure updateVehicleLocation(long vehicleId, double latitude, double longitude),
        procedure editVehicleInformation(long vehicleId, EditVehicleRequest request)
    }

    collection NearestAvailableVehicleResponseList {
        NearestAvailableVehicleResponse response
    }

    collection ProviderVehicleResponseList {
        ProviderVehicleResponse response
    }

    structure GeocodingService<infrastructureService> {
        function Location geocodeAddress(string address),
        function string reverseGeocode(Location location)
    }

    structure VehicleMapper<infrastructureService> {
        function Vehicle mapToVehicle(VehicleRequest request, long providerId)
    }

    structure DistanceUtils<domainService> {
        function double haversineDistance(double lat1, double lon1, double lat2, double lon2)
    }
}
