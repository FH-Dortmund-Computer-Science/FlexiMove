import technology  from "../technology/JavaSpring.technology" as Spring
import technology from "../technology/Protocols.technology" as Protocols
import datatypes from "../domain/booking-context.data" as BookingDomain
import microservices from "../microservices/Vehicle.services" as VehicleBackend
import microservices from "../microservices/Payment.services" as PaymentBackend

@technology(Spring)
@technology(Protocols)
@sync(Protocols::_protocols.rest)
@Spring::_aspects.Application(name="BookingService")
public functional microservice com.instantmobility.BookingService {

    required operations {
        PaymentBackend::PaymentInterface.processFromBooking,
        PaymentBackend::PaymentInterface.getStatus,
        PaymentBackend::PaymentInterface.deletePaymentsByUserId,
        PaymentBackend::PaymentInterface.deletePaymentsByBookingId,
        VehicleBackend:VehicleInterface.updateVehicleStatus,
        VehicleBackend:VehicleInterface.updateVehicleLocation,
        VehicleBackend:VehicleInterface.getBillingInfo
    }

    @endpoints(Protocols::_protocols.rest: "/api/bookings";)
    interface BookingInterface {

        @endpoints(Protocols::_protocols.rest: "/createNewBooking";)
        @Spring::_aspects.PostMapping
        createBooking(
            @Spring::_aspects.RequestBody
            sync in request : BookingDomain::BookingContext.CreateBookingRequest,
            @Spring::_aspects.ResponseEntity
            sync out successCode : int, 
            @Spring::_aspects.ResponseEntity
            sync out fault errorCode : int
        );

        @endpoints(Protocols::_protocols.rest: "/{bookingId}/start";)
        @Spring::_aspects.PostMapping
        startTrip(
            @Spring::_aspects.PathVariable
            sync in bookingId : string, //UUID
            @Spring::_aspects.RequestBody
            sync in request : BookingDomain::BookingContext.StartTripRequest
        );

        @endpoints(Protocols::_protocols.rest: "/{bookingId}/end";)
        @Spring::_aspects.PostMapping
        endTrip(
            @Spring::_aspects.PathVariable
            sync in bookingId : string, //UUID
            @Spring::_aspects.RequestBody
            sync in request : BookingDomain::BookingContext.EndTripRequest,
            @Spring::_aspects.ResponseEntity
            sync out response : BookingDomain::BookingContext.TripSummary, 
            @Spring::_aspects.ResponseEntity
            sync out fault errorResponse : string
        );

        @endpoints(Protocols::_protocols.rest: "/{bookingId}/payment";)
        @Spring::_aspects.PostMapping
        processPayment(
            @Spring::_aspects.PathVariable
            sync in bookingId : string, //UUID
            @Spring::_aspects.RequestBody
            sync in request : BookingDomain::BookingContext.PaymentRequest,
            @Spring::_aspects.ResponseEntity
            sync out successResponse : string, 
            @Spring::_aspects.ResponseEntity
            sync out fault errorResponse : string
        );

        @endpoints(Protocols::_protocols.rest: "/{bookingId}/cancel";)
        @Spring::_aspects.PostMapping
        cancelBooking(
            @Spring::_aspects.PathVariable
            sync in bookingId : string //UUID
        );

        @endpoints(Protocols::_protocols.rest: "/{bookingId}";)
        @Spring::_aspects.GetMapping
        getBookingDetails(
            @Spring::_aspects.PathVariable
            sync in bookingId : string, //UUID
            @Spring::_aspects.ResponseEntity
            sync out response : BookingDomain::BookingContext.BookingDTO
        );

        @endpoints(Protocols::_protocols.rest: "/user/{userId}";)
        @Spring::_aspects.DeleteMapping
        deleteUserBookings(
            @Spring::_aspects.PathVariable
            sync in userId : long,
            @Spring::_aspects.ResponseEntity
            sync out fault errorResponse : string
        );

        @endpoints(Protocols::_protocols.rest: "/deleteAll/byVehicle/{vehicleId}";)
        @Spring::_aspects.DeleteMapping
        deleteBookingsByVehicle(
            @Spring::_aspects.PathVariable
            sync in vehicleId : long,
            @Spring::_aspects.ResponseEntity
            sync out fault errorResponse : string
        );

        @endpoints(Protocols::_protocols.rest: "/user/{userId}";)
        @Spring::_aspects.GetMapping
        getUserBookings(
            @Spring::_aspects.PathVariable
            sync in userId : long,
            @Spring::_aspects.ResponseEntity
            sync out response : BookingDomain::BookingContext.BookingDTOList
        );
    }
}
