//Importe von Technologien oder Datenmodellen

import datatypes from "../TechnologyModels/Java.technology" as Java
import datatypes from "../TechnologyModels/Spring.technology" as Spring
import datatypes from "UserDomain.data" as UserDomain

@technology(Java)
@technology(Spring)
functional microservice org.example.UserService {

    @sync(Spring::_protocols.rest)
    @endpoints(Spring::_protocols.rest: "/api/users";)
    interface Users {

//Get all users
     @Spring::_aspects.Get
        getAll(
            @Spring::_aspects.ResponseEntity
            sync out users : UserDomain::User[]
        );

//Get user by ID

        @endpoints(Spring::_protocols.rest: "/{id}";)
        @Spring::_aspects.Get
        getById(
            @Spring::_aspects.PathVariable
            sync in id : long,
            @Spring::_aspects.ResponseEntity
            sync out user : UserDomain::User
        );

//Get user by email

        @endpoints(Spring::_protocols.rest: "/email";)
        @Spring::_aspects.Get
        getByEmail(
            @Spring::_aspects.RequestParam
            sync in email : UserDomain::Email,
            @Spring::_aspects.ResponseEntity
            sync out user : UserDomain::User
        );


//Create user

        @Spring::_aspects.Post
        create(
            @Spring::_aspects.RequestBody
            sync in request : UserDomain::User
        );

//Delete user by ID with dependencies
        @endpoints(Spring::_protocols.rest: "/{userId}";)
        @Spring::_aspects.Delete
        deleteUser(
            @Spring::_aspects.PathVariable
            sync in userId : long
        );

        ---
        Update user password
        ---
        @endpoints(Spring::_protocols.rest: "/{id}/password";)
        @Spring::_aspects.Put
        updatePassword(
            @Spring::_aspects.PathVariable
            sync in id : long,
            @Spring::_aspects.RequestBody
            sync in password : UserDomain::Password
        );


//Update address

        @endpoints(Spring::_protocols.rest: "/{id}/address";)
        @Spring::_aspects.Put
        updateAddress(
            @Spring::_aspects.PathVariable
            sync in id : long,
            @Spring::_aspects.RequestBody
            sync in address : UserDomain::Address
        );

//Update company name

        @endpoints(Spring::_protocols.rest: "/provider/{id}/companyname";)
        @Spring::_aspects.Put
        updateCompanyName(
            @Spring::_aspects.PathVariable
            sync in id : long,
            @Spring::_aspects.RequestBody
            sync in newCompanyName : string
        );


//Register customer

        @endpoints(Spring::_protocols.rest: "/registercustomer";)
        @Spring::_aspects.Post
        registerCustomer(
            @Spring::_aspects.RequestBody
            sync in customer : UserDomain::Customer,
            @Spring::_aspects.ResponseEntity
            sync out result : string
        );


//Register provider
        @endpoints(Spring::_protocols.rest: "/registerprovider";)
        @Spring::_aspects.Post
        registerProvider(
            @Spring::_aspects.RequestBody
            sync in provider : UserDomain::Provider,
            @Spring::_aspects.ResponseEntity
            sync out result : string
        );


//Login user

        @endpoints(Spring::_protocols.rest: "/login";)
        @Spring::_aspects.Post
        login(
            @Spring::_aspects.RequestBody
            sync in credentials : UserDomain::LoginRequest,
            @Spring::_aspects.ResponseEntity
            sync out result : UserDomain::LoginResponse
        );

// Get provider company name by ID

        @endpoints(Spring::_protocols.rest: "/provider/{id}/companyName";)
        @Spring::_aspects.Get
        getCompanyName(
            @Spring::_aspects.PathVariable
            sync in id : long,
            @Spring::_aspects.ResponseEntity
            sync out companyName : string
        );
    }
}
